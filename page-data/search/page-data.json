{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"\"좋은 코드\"란 무엇인가? [사진: Unsplash의 Chris Ried] 코딩에 대해 공부를 하거나 개발을 하다 보면 좋은 코드 혹은 효율적인 코드를 작성해야 한다는 말을 많이 듣게\n된다. 코드는 개발자들의 성격, 성향에 따라 스타일이 달라지며 같은 기능을 하는 코드이더라도 여러가지 방식으로 \n구현될 수 있다. 필자도 프로젝트를 진행해 보면서 팀원과 다…","fields":{"slug":"/좋은코드란 무엇일까/"},"frontmatter":{"date":"January 10, 2025","title":"좋은코드란 무엇인가?","tags":["좋은코드"]},"rawMarkdownBody":"\r\n## \"좋은 코드\"란 무엇인가?\r\n\r\n[![사진: Unsplash의 Chris Ried](..\\src\\image\\coding.jpg)]\r\n\r\n코딩에 대해 공부를 하거나 개발을 하다 보면 좋은 코드 혹은 효율적인 코드를 작성해야 한다는 말을 많이 듣게\r\n된다. 코드는 개발자들의 성격, 성향에 따라 스타일이 달라지며 같은 기능을 하는 코드이더라도 여러가지 방식으로 \r\n구현될 수 있다. 필자도 프로젝트를 진행해 보면서 팀원과 다른 스타일의 코드, 기능은 구현되었지만 비효율 적인\r\n코드로 고생을 꽤나 하였다. \r\n\r\n그런데 좋은 코드라고 하는 것은 어떤 기준이 있는 걸까? \r\n\r\n지금부터 일반적으로 많은 사람들이 개발을 해오면서 다양한 정의와 기준을 제시해온\r\n“좋은 코드” 에 대해 알아볼 것이다.\r\n\r\n---\r\n\r\n## \"좋은 코드\"의 조건\r\n---\r\n### 1. 가독성\r\n\r\n좋은 코드의 첫 번째 조건은 **가독성**이다.\r\n\r\n**코드의 가독성**이란 코드를 작성할 때에는 다른 개발자는 물론 개발자 자신의 코드도 나중에 봐도 이해할 수 있도록 작성해야 한다.\r\n\r\n개발자들이 말하기를 개발을 진행할 때 코딩을 하는 시간보다 코드를 읽고 해석하는 시간이 압도적으로 많다고 한다.\r\n\r\n그만큼 코드를 분석하는 작업은 굉장히 중요하고 시간을 많이 소요하기 때문에 가독성은 가장 중요한 좋은 코드의 조건이다.\r\n\r\n\r\n#### 가독성을 높이는 방법\r\n\r\n가독성에는 두 가지 개념이 있다\r\n\r\n* **표현적 가독성**: 눈에 잘 들어오고 읽는데 불편함이 없어야 한다\r\n\r\n마치 글에서 여백이 없거나 글자가 뒤죽박죽이면 글을 읽고 싶지 않은 것처럼 코드도 일관성과 명료함이\r\n중요하다.\r\n\r\n```java\r\npublic class Main {\r\npublic static void main(String[] args) { int[] a = {1, 2, 3};\r\nfor (int i = 0; i < a.length; i++) {System.out.println(a[i]);}}\r\n}\r\n```\r\n\r\n위 코드를 보면 분명 오류는 없고 정상적으로 돌아가는 코드임에도 보기가 굉장히 불편하다.\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        int[] a = {1, 2, 3};\r\n        for (int i = 0; i < a.length; i++) {\r\n            System.out.println(a[i]);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n이런 식으로 들여쓰기만 해줘도 읽기가 편한 코드가 된다. **코드의 스타일과 구조가 일관성 있게 유지**만 되어도 빠르게 코드를 이해하고 작업이 가능하다.\r\n\r\n* **기능적 가독성**: 코드가 작성된 방식이 실제 작동하는 논리를 명확히 보여줄 수 있어야 한다.\r\n\r\n코드에는 많은 변수, 함수, 클래스 등이 존재하는데 각각의 요소들이 어떤 동작을 하는지, 어떤 목적을 가진 요소인지 명확히 전달해야 한다.\r\n\r\n그렇게 하려면 변수명, 함수명, 클래스명을 지을 때 다음의 규칙을 지키는 것이 도움이 될 것이다.\r\n\r\n1. 의도를 드러내는 이름\r\n  * `calculateTotalPrice` 는 `calc`보다 의도가 명확하다.\r\n  * `Math`, `English`, `Science`는 `grade1`, `grade2`, `grade3`보다 직관적이다.\r\n\r\n2. 일관된 스타일 사용\r\n  * 변수와 함수 이름은 소문자로 시작하고 단어는 **첫 글자를 제외한 각 단어의 첫 글자를 대문자로 표기**하는 `카멜케이스`로 구분한다.\r\n\r\n  ```java\r\n  int totalPrice;\r\n  String customerName;\r\n  void calculateOrderAmount() {}\r\n  ```\r\n\r\n  * 클래스 이름은 단어의 **첫 글자를 대문자로 표기**하는 `파스칼 케이스`를 사용한다.\r\n\r\n  ```java\r\n  class OrderManager {}\r\n  class Customer {}\r\n  ```\r\n\r\n3. 축약어 지양\r\n* 나쁜 예: `tmpAmt`, `calcPrc`\r\n* 좋은 예: `temporaryAmount`, `calculatePrice`\r\n\r\n4. 길이와 명확성의 균형\r\n* 이름이 너무 짧아도, 너무 길어도 안되고 적당한 길이로 목적을 표현해야 한다.\r\n```java\r\nint i; // 나쁜 예: 너무 짧음\r\nint index; // 좋은 예\r\n\r\nString customerDataRetrievedFromDatabaseById; // 나쁜 예: 너무 길음\r\nString customerData; // 좋은 예\r\n```\r\n---\r\n\r\n### 2. 유지보수성\r\n두 번째 조건은 **유지보수성**이다. 좋은 코드는 변경이 용이해야 한다. \r\n소프트웨어는 오류가 발생하거나 시간이 지남에 따라 요구사항이 변경되기 마련인데 \r\n이러한 변화에 적응할 수 있는 코드는 유지보수성이 뛰어나다고 할 수 있다.\r\n\r\n#### 유지 보수성을 높이는 방법\r\n* 코드를 **모듈화**하여 재사용성을 높임\r\n  * **모듈화**란 프로그램을 작은 단위로 분할하는 개념이다. 각각의 모듈은 특정 기능을 수행하는 코드의 집합이며, 독립적으로 개발, 테스트, 유지 보수할 수 있다.\r\n모듈화의 예를 들자면\r\n```java\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        int[] numbers = {1, 2, 3, 4, 5};\r\n\r\n        int sum = 0;\r\n        for (int number : numbers) {\r\n            sum += number;\r\n        }\r\n        System.out.println(\"Sum: \" + sum);\r\n\r\n        int max = numbers[0];\r\n        for (int number : numbers) {\r\n            if (number > max) {\r\n                max = number;\r\n            }\r\n        }\r\n        System.out.println(\"Max: \" + max);\r\n    }\r\n}\r\n\r\n```\r\n위 코드는 메인 메서드에서 배열의 합을 계산하는 기능과 배열의 최댓값을 찾는 기능을 직접 실행시켰다. 물론 오류가 없고 잘 작동하는 코드이지만 \r\n만약 저 기능이 여러 개의 다른 클래스들에서도 사용된다고 생각해 보자. 모듈화가 안된 코드에서는 필요한 기능의 코드를 전부 복사해서 붙여 넣어야 하고,\r\n만약 오류가 나거나 변경사항이 생기면 그 코드들을 찾아서 일일이 수정을 해주어야 하는 번거로움이 발생한다.\r\n\r\n모듈화를 한 코드는 다음과 같다.\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        int[] numbers = {1, 2, 3, 4, 5};\r\n\r\n        int sum = calculateSum(numbers);\r\n        System.out.println(\"Sum: \" + sum);\r\n\r\n        int max = findMax(numbers);\r\n        System.out.println(\"Max: \" + max);\r\n    }\r\n\r\n    // 배열의 합을 계산하는 메서드\r\n    public static int calculateSum(int[] numbers) {\r\n        int sum = 0;\r\n        for (int number : numbers) {\r\n            sum += number;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    // 배열의 최댓값을 찾는 메서드\r\n    public static int findMax(int[] numbers) {\r\n        int max = numbers[0];\r\n        for (int number : numbers) {\r\n            if (number > max) {\r\n                max = number;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}\r\n\r\n```\r\n\r\n배열의 합을 계산하는 메서드와 배열의 최댓값을 찾는 메서드를 따로 구성하여 기능이 필요할 때마다 메서드를 호출하여 사용할 수 있다.\r\n이렇게 코딩을 하면 코드 중복을 피하고 코드의 재사용성과 유지 보수성을 높일 수 있다. 반복적으로 사용하는 기능들이 있다면 함수로 추출하여 재사용이 \r\n가능하도록 코딩을 하는 습관을 들이면 좋겠다.\r\n\r\n### 3. 주석\r\n마지막으로는 **주석**이다. **주석**은 코드의 의도나 복잡한 논리를 설명하는 데 사용된다. 주석을 이용한 코드를 보면 정말 복잡한 코드더라도 설명으로 인해\r\n이 코드가 무슨 동작을 하는지 대충은 알 수 있다. 하지만 주석을 남용하거나 잘못 사용하면 오히려 코드를 이해하기 어렵게 만들 수 있다는 것도 알아야 한다.\r\n\r\n#### 주석작성의 기본 원칙\r\n1. 의도를 설명해야 한다.\r\n  * 주석은 \"무엇을 하는가\" 보다 \"왜 그렇게 하는가\"를 설명해야 한다.\r\n\r\n```java\r\n// 나쁜 예: 불필요한 주석\r\nint total = price * quantity; // 가격과 수량을 곱함\r\n\r\n// 좋은 예: 의도를 설명하는 주석\r\nint total = price * quantity; // 총 비용 계산 (단위: USD)\r\n```\r\n\r\n2. 필요할 때만 간결하게 작성해야 한다.\r\n  * 무분별하게 코드 주석을 작성하지 않고, 꼭 필요할 때만 필수 정보를 포함하여 주석을 작성하는 것이 효과적이다.\r\n\r\n3. 코드와 함께 유지 보수를 해야 한다.\r\n  * 코드가 변경되면 주석도 꼭 함께 업데이트를 해야한다. 그렇지 않으면 주석이 오히려 오해를 불러일으킬 수 있다.\r\n\r\n4. 표준화된 주석 스타일을 사용해야 한다.\r\n  * 주석도 코드와 마찬가지로 주석 스타일을 표준화하여 일관성을 유지해야 한다.\r\n---\r\n\r\n### 코딩 스타일 가이드\r\n지금까지 설명한 **\"좋은 코드\"**를 작성하는 법을 알아보았는데 이것들을 모두 숙지하고 있어도 사람마다 코드를 작성하는 스타일은 모두 다를 것이다.\r\n그렇지만 프로젝트를 진행하거나 회사에 취직하게 되면 코드 스타일을 통일해야 하는 경우가 있을 것이다. 이러한 경우를 위해 일반적으로 많이 사용하는 \r\n가이드가 마련되어 있다.\r\n\r\n대표적인 것이 구글에서 발행한 **'구글 코드 스타일 가이드'**다.\r\n* [Google Style Guides](https://google.github.io/styleguide/)\r\n\r\n구글 코드 스타일 가이드에 들어가면 많은 언어들을 다루고 있다. 개발자들에게 많이 사용되는 가이드이므로 꼭 참고해 보는 것이 좋겠다.\r\n\r\n## 마무리\r\n지금까지 \"좋은 코드\"를 작성하는 법을 알아보았다. 어떻게 코드를 작성해야겠다라는 생각은 항상 하고 있지만 마음처럼 되지 않는 것이 현실이다.\r\n\r\n청소도 습관이 되어야 하듯이 깔끔한 코드를 작성하는 것도 습관이 들여져 있어야 되겠다는 생각이 들었다. 앞으로 코딩을 할 때는 \"좋은 코드\"를 작성한다는 마음가짐으로\r\n코딩을 하는 습관을 들여야겠다.\r\n\r\n\r\n"},{"excerpt":"바꾸다 프로젝트 필자는 학교 수업에서 개발 프로젝트 수업을 들었었다.\n바로 아래 사진 링크에 있는 물물교환 사이트 프로젝트인데 바꾸다.github_Link 결과물은 나왔지만 학기 중 개발 프로젝트를 진행해야 해서 바쁜 일정으로 매끄럽지 못한 프로젝트 진행을 하였다. 그중 가장 문제가 되었던 것이 코드가 정돈되지 못하다는 것이다. 같은 코드의 반복과 규칙이…","fields":{"slug":"/바꾸다 프로젝트 바꾸기_좋은 코드로 수정하기/"},"frontmatter":{"date":"January 06, 2025","title":"바꾸다 프로젝트 바꾸기 / 좋은 코드로 수정하기","tags":["좋은코드"]},"rawMarkdownBody":"\r\n## 바꾸다 프로젝트\r\n\r\n필자는 학교 수업에서 개발 프로젝트 수업을 들었었다.\r\n바로 아래 사진 링크에 있는 물물교환 사이트 프로젝트인데\r\n\r\n[![바꾸다.github_Link](..\\src\\image\\바꾸다_가로로고.png)](https://github.com/Yongseok-2/bagguda)\r\n\r\n결과물은 나왔지만 학기 중 개발 프로젝트를 진행해야 해서 바쁜 일정으로 매끄럽지 못한 프로젝트 진행을 하였다.\r\n\r\n그중 가장 문제가 되었던 것이 코드가 정돈되지 못하다는 것이다. 같은 코드의 반복과 규칙이 없는 스타일로 내가 봐도 좋지 못한 코드였다.\r\n바쁜 일정으로 기능 구현에만 집중하여 그런 것이다.\r\n\r\n이는 **가장 중요한 협업에서도 문제를 일으켰다.** 다른 팀원이 코드를 짜오면 그것을 읽고 해석하는 것이 매우 힘들고 시간을 많이 허비했다.\r\n그래서 다른 팀원이 구현한 기능은 굳이 수정을 하지 않고 그대로 쓰는 경우가 많았다.\r\n\r\n이런 문제로 좋은 코드 품질은 개발에서 정말 중요하다는 생각이 들었다. 좋은 코드를 작성은 코드를 작성하는 습관에서 나온다고 생각하기 때문에 \r\n\r\n방학인 지금, 위 프로젝트의 코드를 **“좋은 코드”**로 수정하기로 했다.\r\n\r\n일단 코드의 문제점에 대해 파악해 보겠다.\r\n\r\n---\r\n\r\n## 코드의 문제점\r\n---\r\n### 첫 번째 문제점\r\n> #### 중복된 코드\r\n> 웹사이트는 특성상 상단의 메뉴 바, 측면의 사이드 바 등 페이지를 이동해도 동일한 요소들이 꼭 존재한다.\r\n하지만 내 프로젝트 코드에서는 반복되는 요소들을 각 코드 페이지마다 따로따로 구현을 하였다.\r\n\r\n![반복되는 코드1](..\\src\\image\\헤더반복코드1_index.jsp.png)\r\n![반복되는 코드2](..\\src\\image\\헤더반복코드2_search_result.jsp.png)\r\n\r\n위 사진에 있는 코드는 각각 다른 페이지에서 구현된\r\n웹사이트에서 상단 고정되어 있는 메뉴바 코드이다.\r\n이 문제점은 프로젝트를 진행하면서도 불편한 점이 많았다.\r\n**수정사항이 단 하나라도 있으면 많이 페이지들을 일일이 수정**해야 하는 상황이 발생했다.\r\n\r\n> ### 해결 방법\r\n`include` 지시자 또는 `include` 액션 태그 방식으로 코드 또는 코드의 결과를 불러와서 해결 가능하다.\r\n\r\n`inlcude` 지시자 와 액션 태그에 대해서는 추후 포스팅에서 알아볼 예정이다.\r\n\r\n\r\n### 두 번째 문제점\r\n> #### 중복된 데이터베이스 연결문\r\n페이지 내의 길어진 데이터베이스 연결문이다.\r\n이것은 첫 번째 문제점과 마찬가지로 페이지마다 데이터베이스를 연결하는 코드를 각각 작성했다.\r\n\r\n![반복되는 DB1](..\\src\\image\\길어진 jdbc_index.jsp.png)\r\n![반복되는 DB2](..\\src\\image\\길어진 jdbc_search_result.jsp.png)\r\n\r\n이렇게 직접 데이터베이스를 연결해서 사용하면 매번 사용자가 요청할 때마다 드라이버를 로드하고\r\n커넥션 객체를 생성하여 연결하고 종료해야 하기 때문에 **비효율적인 작동**을 한다\r\n\r\n\r\n> ### 해결 방법\r\n`Connection pool`을 이용하여 데이터 베이스를 연결해 주면 된다.\r\n`Connection pool`은 미리 여러 개의 데이터베이스 커넥션을 생성해놓고, 필요할 때마다 재사용하는 기술이다.\r\n\r\n`Connection pool`에 대해서는 추후 포스팅으로 다시 알아볼 예정이다.\r\n\r\n\r\n---\r\n\r\n## 마무리\r\n\r\n일단 이 두 문제가 내 프로젝트 코드의 가장 큰 문제점이라고 생각한다. 앞으로 이 문제점들을 고쳐 나갈 것인데\r\n이 과정에서 좋은 코드가 무엇인지 알아가고, 좋은 코드를 작성하는 법에 대해 배우면서 좋은 습관을 들이는 것이 목표다.\r\n\r\n다음 포스팅은 **“좋은 코드란 무엇인가?”**에 대해 알아볼 예정이다.\r\n\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}