{"componentChunkName":"component---src-templates-post-jsx","path":"/좋은코드란 무엇일까/","result":{"data":{"site":{"siteMetadata":{"title":"Yongseok"}},"markdownRemark":{"id":"d43f3733-0dd6-590f-a8e0-c643fa4c9f81","excerpt":"\"좋은 코드\"란 무엇인가? [사진: Unsplash의 Chris Ried] 코딩에 대해 공부를 하거나 개발을 하다 보면 좋은 코드 혹은 효율적인 코드를 작성해야 한다는 말을 많이 듣게\n된다. 코드는 개발자들의 성격, 성향에 따라 스타일이 달라지며 같은 기능을 하는 코드이더라도 여러가지 방식으로 \n구현될 수 있다. 필자도 프로젝트를 진행해 보면서 팀원과 다…","html":"<h2 id=\"좋은-코드란-무엇인가\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"좋은 코드란 무엇인가 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>\"좋은 코드\"란 무엇인가?</h2>\n<p>[<img src=\"..%5Csrc%5Cimage%5Ccoding.jpg\" alt=\"사진: Unsplash의 Chris Ried\">]</p>\n<p>코딩에 대해 공부를 하거나 개발을 하다 보면 좋은 코드 혹은 효율적인 코드를 작성해야 한다는 말을 많이 듣게\n된다. 코드는 개발자들의 성격, 성향에 따라 스타일이 달라지며 같은 기능을 하는 코드이더라도 여러가지 방식으로\n구현될 수 있다. 필자도 프로젝트를 진행해 보면서 팀원과 다른 스타일의 코드, 기능은 구현되었지만 비효율 적인\n코드로 고생을 꽤나 하였다. </p>\n<p>그런데 좋은 코드라고 하는 것은 어떤 기준이 있는 걸까? </p>\n<p>지금부터 일반적으로 많은 사람들이 개발을 해오면서 다양한 정의와 기준을 제시해온\n“좋은 코드” 에 대해 알아볼 것이다.</p>\n<hr>\n<h2 id=\"좋은-코드의-조건\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-label=\"좋은 코드의 조건 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>\"좋은 코드\"의 조건</h2>\n<hr>\n<h3 id=\"1-가독성\" style=\"position:relative;\"><a href=\"#1-%EA%B0%80%EB%8F%85%EC%84%B1\" aria-label=\"1 가독성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. 가독성</h3>\n<p>좋은 코드의 첫 번째 조건은 <strong>가독성</strong>이다.</p>\n<p><strong>코드의 가독성</strong>이란 코드를 작성할 때에는 다른 개발자는 물론 개발자 자신의 코드도 나중에 봐도 이해할 수 있도록 작성해야 한다.</p>\n<p>개발자들이 말하기를 개발을 진행할 때 코딩을 하는 시간보다 코드를 읽고 해석하는 시간이 압도적으로 많다고 한다.</p>\n<p>그만큼 코드를 분석하는 작업은 굉장히 중요하고 시간을 많이 소요하기 때문에 가독성은 가장 중요한 좋은 코드의 조건이다.</p>\n<h4 id=\"가독성을-높이는-방법\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%8F%85%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"가독성을 높이는 방법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>가독성을 높이는 방법</h4>\n<p>가독성에는 두 가지 개념이 있다</p>\n<ul>\n<li><strong>표현적 가독성</strong>: 눈에 잘 들어오고 읽는데 불편함이 없어야 한다</li>\n</ul>\n<p>마치 글에서 여백이 없거나 글자가 뒤죽박죽이면 글을 읽고 싶지 않은 것처럼 코드도 일관성과 명료함이\n중요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 분명 오류는 없고 정상적으로 돌아가는 코드임에도 보기가 굉장히 불편하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 들여쓰기만 해줘도 읽기가 편한 코드가 된다. <strong>코드의 스타일과 구조가 일관성 있게 유지</strong>만 되어도 빠르게 코드를 이해하고 작업이 가능하다.</p>\n<ul>\n<li><strong>기능적 가독성</strong>: 코드가 작성된 방식이 실제 작동하는 논리를 명확히 보여줄 수 있어야 한다.</li>\n</ul>\n<p>코드에는 많은 변수, 함수, 클래스 등이 존재하는데 각각의 요소들이 어떤 동작을 하는지, 어떤 목적을 가진 요소인지 명확히 전달해야 한다.</p>\n<p>그렇게 하려면 변수명, 함수명, 클래스명을 지을 때 다음의 규칙을 지키는 것이 도움이 될 것이다.</p>\n<ol>\n<li>의도를 드러내는 이름</li>\n<li><code class=\"language-text\">calculateTotalPrice</code> 는 <code class=\"language-text\">calc</code>보다 의도가 명확하다.</li>\n<li><code class=\"language-text\">Math</code>, <code class=\"language-text\">English</code>, <code class=\"language-text\">Science</code>는 <code class=\"language-text\">grade1</code>, <code class=\"language-text\">grade2</code>, <code class=\"language-text\">grade3</code>보다 직관적이다.</li>\n<li>일관된 스타일 사용</li>\n<li>변수와 함수 이름은 소문자로 시작하고 단어는 <strong>첫 글자를 제외한 각 단어의 첫 글자를 대문자로 표기</strong>하는 <code class=\"language-text\">카멜케이스</code>로 구분한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> totalPrice<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">calculateOrderAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>클래스 이름은 단어의 <strong>첫 글자를 대문자로 표기</strong>하는 <code class=\"language-text\">파스칼 케이스</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderManager</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>축약어 지양</li>\n<li>나쁜 예: <code class=\"language-text\">tmpAmt</code>, <code class=\"language-text\">calcPrc</code></li>\n<li>좋은 예: <code class=\"language-text\">temporaryAmount</code>, <code class=\"language-text\">calculatePrice</code></li>\n<li>길이와 명확성의 균형</li>\n<li>\n<p>이름이 너무 짧아도, 너무 길어도 안되고 적당한 길이로 목적을 표현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 나쁜 예: 너무 짧음</span>\n<span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 좋은 예</span></code></pre></div>\n</li>\n</ol>\n<p>String customerDataRetrievedFromDatabaseById; // 나쁜 예: 너무 길음\nString customerData; // 좋은 예</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\n\n### 2. 유지보수성\n두 번째 조건은 **유지보수성**이다. 좋은 코드는 변경이 용이해야 한다. \n소프트웨어는 오류가 발생하거나 시간이 지남에 따라 요구사항이 변경되기 마련인데 \n이러한 변화에 적응할 수 있는 코드는 유지보수성이 뛰어나다고 할 수 있다.\n\n#### 유지 보수성을 높이는 방법\n* 코드를 **모듈화**하여 재사용성을 높임\n  * **모듈화**란 프로그램을 작은 단위로 분할하는 개념이다. 각각의 모듈은 특정 기능을 수행하는 코드의 집합이며, 독립적으로 개발, 테스트, 유지 보수할 수 있다.\n모듈화의 예를 들자면\n```java\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(\"Sum: \" + sum);\n\n        int max = numbers[0];\n        for (int number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n        System.out.println(\"Max: \" + max);\n    }\n}</code></pre></div>\n<p>위 코드는 메인 메서드에서 배열의 합을 계산하는 기능과 배열의 최댓값을 찾는 기능을 직접 실행시켰다. 물론 오류가 없고 잘 작동하는 코드이지만\n만약 저 기능이 여러 개의 다른 클래스들에서도 사용된다고 생각해 보자. 모듈화가 안된 코드에서는 필요한 기능의 코드를 전부 복사해서 붙여 넣어야 하고,\n만약 오류가 나거나 변경사항이 생기면 그 코드들을 찾아서 일일이 수정을 해주어야 하는 번거로움이 발생한다.</p>\n<p>모듈화를 한 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">calculateSum</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max: \"</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 배열의 합을 계산하는 메서드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> number<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 배열의 최댓값을 찾는 메서드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                max <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열의 합을 계산하는 메서드와 배열의 최댓값을 찾는 메서드를 따로 구성하여 기능이 필요할 때마다 메서드를 호출하여 사용할 수 있다.\n이렇게 코딩을 하면 코드 중복을 피하고 코드의 재사용성과 유지 보수성을 높일 수 있다. 반복적으로 사용하는 기능들이 있다면 함수로 추출하여 재사용이\n가능하도록 코딩을 하는 습관을 들이면 좋겠다.</p>\n<h3 id=\"3-주석\" style=\"position:relative;\"><a href=\"#3-%EC%A3%BC%EC%84%9D\" aria-label=\"3 주석 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. 주석</h3>\n<p>마지막으로는 <strong>주석</strong>이다. <strong>주석</strong>은 코드의 의도나 복잡한 논리를 설명하는 데 사용된다. 주석을 이용한 코드를 보면 정말 복잡한 코드더라도 설명으로 인해\n이 코드가 무슨 동작을 하는지 대충은 알 수 있다. 하지만 주석을 남용하거나 잘못 사용하면 오히려 코드를 이해하기 어렵게 만들 수 있다는 것도 알아야 한다.</p>\n<h4 id=\"주석작성의-기본-원칙\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D%EC%9E%91%EC%84%B1%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99\" aria-label=\"주석작성의 기본 원칙 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>주석작성의 기본 원칙</h4>\n<ol>\n<li>의도를 설명해야 한다.</li>\n<li>주석은 \"무엇을 하는가\" 보다 \"왜 그렇게 하는가\"를 설명해야 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 나쁜 예: 불필요한 주석</span>\n<span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가격과 수량을 곱함</span>\n\n<span class=\"token comment\">// 좋은 예: 의도를 설명하는 주석</span>\n<span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 총 비용 계산 (단위: USD)</span></code></pre></div>\n<ol start=\"2\">\n<li>필요할 때만 간결하게 작성해야 한다.</li>\n<li>무분별하게 코드 주석을 작성하지 않고, 꼭 필요할 때만 필수 정보를 포함하여 주석을 작성하는 것이 효과적이다.</li>\n<li>코드와 함께 유지 보수를 해야 한다.</li>\n<li>코드가 변경되면 주석도 꼭 함께 업데이트를 해야한다. 그렇지 않으면 주석이 오히려 오해를 불러일으킬 수 있다.</li>\n<li>표준화된 주석 스타일을 사용해야 한다.</li>\n<li>\n<h2 id=\"주석도-코드와-마찬가지로-주석-스타일을-표준화하여-일관성을-유지해야-한다\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D%EB%8F%84-%EC%BD%94%EB%93%9C%EC%99%80-%EB%A7%88%EC%B0%AC%EA%B0%80%EC%A7%80%EB%A1%9C-%EC%A3%BC%EC%84%9D-%EC%8A%A4%ED%83%80%EC%9D%BC%EC%9D%84-%ED%91%9C%EC%A4%80%ED%99%94%ED%95%98%EC%97%AC-%EC%9D%BC%EA%B4%80%EC%84%B1%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"주석도 코드와 마찬가지로 주석 스타일을 표준화하여 일관성을 유지해야 한다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>주석도 코드와 마찬가지로 주석 스타일을 표준화하여 일관성을 유지해야 한다.</h2>\n</li>\n</ol>\n<h3 id=\"코딩-스타일-가이드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\"코딩 스타일 가이드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>코딩 스타일 가이드</h3>\n<p>지금까지 설명한 <strong>\"좋은 코드\"</strong>를 작성하는 법을 알아보았는데 이것들을 모두 숙지하고 있어도 사람마다 코드를 작성하는 스타일은 모두 다를 것이다.\n그렇지만 프로젝트를 진행하거나 회사에 취직하게 되면 코드 스타일을 통일해야 하는 경우가 있을 것이다. 이러한 경우를 위해 일반적으로 많이 사용하는\n가이드가 마련되어 있다.</p>\n<p>대표적인 것이 구글에서 발행한 <strong>'구글 코드 스타일 가이드'</strong>다.</p>\n<ul>\n<li><a href=\"https://google.github.io/styleguide/\">Google Style Guides</a></li>\n</ul>\n<p>구글 코드 스타일 가이드에 들어가면 많은 언어들을 다루고 있다. 개발자들에게 많이 사용되는 가이드이므로 꼭 참고해 보는 것이 좋겠다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마무리</h2>\n<p>지금까지 \"좋은 코드\"를 작성하는 법을 알아보았다. 어떻게 코드를 작성해야겠다라는 생각은 항상 하고 있지만 마음처럼 되지 않는 것이 현실이다.</p>\n<p>청소도 습관이 되어야 하듯이 깔끔한 코드를 작성하는 것도 습관이 들여져 있어야 되겠다는 생각이 들었다. 앞으로 코딩을 할 때는 \"좋은 코드\"를 작성한다는 마음가짐으로\n코딩을 하는 습관을 들여야겠다.</p>","frontmatter":{"title":"좋은코드란 무엇인가?","date":"January 10, 2025","update":"January 10, 2025","tags":["좋은코드"],"series":"좋은코드만들기"},"fields":{"slug":"/좋은코드란 무엇일까/","readingTime":{"minutes":12.385}}},"seriesList":{"edges":[{"node":{"id":"a6a323c5-31eb-595f-b91d-7c39ef33cdfe","fields":{"slug":"/바꾸다 프로젝트 바꾸기_좋은 코드로 수정하기/"},"frontmatter":{"title":"바꾸다 프로젝트 바꾸기 / 좋은 코드로 수정하기"}}},{"node":{"id":"d43f3733-0dd6-590f-a8e0-c643fa4c9f81","fields":{"slug":"/좋은코드란 무엇일까/"},"frontmatter":{"title":"좋은코드란 무엇인가?"}}}]},"previous":{"fields":{"slug":"/바꾸다 프로젝트 바꾸기_좋은 코드로 수정하기/"},"frontmatter":{"title":"바꾸다 프로젝트 바꾸기 / 좋은 코드로 수정하기"}},"next":null},"pageContext":{"id":"d43f3733-0dd6-590f-a8e0-c643fa4c9f81","series":"좋은코드만들기","previousPostId":"a6a323c5-31eb-595f-b91d-7c39ef33cdfe","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}